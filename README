== Railways
== Featherweight Web Development
-- Author: Sebastien Pierre <sebastien@ivy.fr>
-- Revision: 0.9.0 (14-Jul-2008)

_Railways_ is a lightweight Python Web WSGI-based toolkit that is designed for
easy prototyping and development of Web services and Web apps.

Some facts:

  - Railways is notably one of the very few web toolkit able to do *HTTP
    streaming* (aka. Comet) out of the box.

  - Railways comes with batteries included and features a simple, fast,
    *reactor-based WSGI server*.

  - Railways makes use of Python decorators for declarative web development.

Core concept: web services are "just" message-passing over HTTP. Regular Python
classes (and their methods) methods can be turned into web services using only
decorators.

Seeing is Believing
===================

  Railways is for hackers, so here is the code.

  The Telephone: A Basic Web Service
  ----------------------------------

  <<<
  from railways import ajax, on, run, Component

  class Telephone(Component):

    def __init__( self ):
      Component.__init__(self)
      self.tube = []

    @ajax(GET="/listen")
    def listen( self ):
      if self.tube:
        m = self.tube[0] ; del self.tube[0]
        return m

    @ajax(GET="/say/{something:rest}")
    def say( self, something ):
      self.tube.append(something)

  run(components=[Telephone()])
  >>>

  run this script with 'python':

  <<<
  $ python telephone.py
  Dispatcher: @on  GET /listen
  Dispatcher: @on POST /channels:burst
  Dispatcher: @on  GET /say/{something:rest}
  Railways embedded server listening on 0.0.0.0:8000
  >>>

  and then interact with your new web service using curl

  >   curl http://localhost:8000/say/hello
  >   null
  >   curl http://localhost:8000/say/world
  >   null
  >   curl http://localhost:8000/listen
  >   "hello"
  >   curl http://localhost:8000/listen
  >   "world"

  The Watch: A less basic Web Service
  ===================================

  Now "The Telephone" was rather trivial. Let's do something more impressive : a
  web page that displays the time.

  from railways import ajax, on, run, Component
  import time

  <<<
  class Watch(Component):

    @on(GET="/time")
    def getTime( self, request ):
      def stream():
        while True:
          yield "<html><body><pre>%s</pre></body></html>" % (time.ctime())
          time.sleep(1)
      return request.respondMultiple(stream())

  run(components=[Watch()])
  >>>

  Now start firefox and go to <http://localhost:8000/time> (you won't be able to
  open two tabs with it, if you want to test concurrency, use another browser or
  another machine).

  The Chat: A less basic Web Service
  ===================================

  The Watch was pretty interesting, but the 'time.sleep(1)' in the middle of the
  generator doesn't really help performance. Let's do some more fancy stuff.


Reference
=========

  Features
  --------

  - Based on WSGI
  - Embedded reactor-based WSGI server
  - Flup for FCGI/SCGI/AJP connection
  - Plain old CGI mode
  - "Comet"/HTTP streaming support
  - Decorators for declarative web services
  - Lightweight

  Architecture
  ------------

  >                  APPLICATION  ----------------- COMPONENT
  >                  -----------           -------- COMPONENT
  >                   

  Dispatcher
  ----------

  To be able to server pages and content in your application, you have to express
  a mapping between URL and actual methods of your components.

  In Railways, you define a mapping by _exposing_ a method of your component using
  the '@on' decorator:

  >	class Main(Component):
  >		...
  >		@on(GET="/index")
  >		def index( self, request ):
  >			return request.respond("Hello, world !")

  Here, we've defined the 'index' method (the name is not important), and
  _exposed_ to react to a 'GET' HTTP method sent to the '/index' URL. Restarting
  your server and going to <http://localhost:8080/index> will give you this text:

  >	Hello, world !

  The '@on' decorator parameters are made of the following elements:

    - a _parameter name_ (like 'GET', 'POST', 'GET_POST'), where the HTTP methods
      are uppercase and joined by underscores

    - a _parameter value_, which is an expression that defines matching URLs.

    - an optional 'priority', which allows one mapping with higher priority to be used
      in preference when more than one mapping matches the URL.

  The parameter value expression can contain specific parts that will be matched
  and given as arguments to the decorated method:

  >		@on(GET="/int/{i:integer}")
  >		def getInteger(self, request, i):
  >			return request.respond("Here is number %d" % (i))

  Now, if you go to <http://localhost:8080/int/0>, or
  <http://localhost:8080/int/1>, <http://localhost:8080/int/2>, you will see these
  numbers printed out.

  Generally speaking, anything between '{' and '}' in parameter expressions will
  be interpreted as a _matching argument_. The format is like that:

  >	{ NAME : EXPRESSION }

  where 'NAME' must match an argument of the decorated method, and where
  'EXPRESSION' is either a regular expression (as of Python 're' module), or one
  of the following values:

   - 'word', 'alpha':  any sequence of alphabetical chars
   - 'string': everything that is not a '/'
   - 'digits': a sequence of digits, cast to an 'int'
   - 'number': a floating point or an int, negative or positive
   - 'int', 'integer': an int, negative or positive
   - 'float': an float, negative or positive
   - 'file': two alphanumeric words joined by a dot
   - 'chunk': everything which is neither a '/' nor a '.'
   - 'rest', 'any' : the rest of the URL
   - 'range': two integers joined by ':' (Python-style)

  Once you have your mapping right, you may want to do more complicated things
  with your exposed methods... and we'll see in the next section what we can do
  with the mysterious 'request' parameter.

  The Request object
  ------------------

  The 'railways.core.Request' class defines a class that represents an HTTP
  request. The 'request' parameter we've seen in the previous section is an
  instance of this class, that represents the request sent by the client browser
  and received by the Railways server.

  The request object offers different kind of functionalities:

   - Accessing the request parameters, cookies and  data: whether 'POST' or 'GET', whether
     url-encoded or form-encoded, parameters and attachments are retrievable
     using the 'param', 'cookies' and 'data' methods.

   - Accessing request method, headers and various information: TODO

   - Creating a response: the request object contains methods to create specific
     responses, whether it is serving a local file, returning JSON data,
     redirecting, returning an error, or simply returning specific content. These
     methods are mainly 'respond', 'returns', 'redirect', 'bounce', 'notFound',
     'localFile'.

  In practice, you need only to know a few things. First, how to get access to
  parameters.

  Say you have a request to that URL:

  >	http://localhost:8080/api/doThis?a=1&b=2

  and that you have a handler bound to '/api/doThis', here is how you would get
  access to a and b:

  >	@on(GET_POST='/api/doThis')
  >	def doThis( self, request ):
  >		a = request.get('a')
  >		b = request.get('b')
  >		if a is None or b is None:
  >			return request.respond(
  >				"You must give proper 'a' and 'b' parameters",
  >				status=400
  >			)
  >		else:
  >			return request.respond(
  >				"Here a:%s and here is b:%s" % (a,b)
  >			)

  This is the simplest, and most common case. Now if you want to receive a file
  that was 'POST'ed by the client, by a form like this one:

  >	<form action="/api/postThis" method="POST">
  >		<input type="text" name="name" value="File name" />
  >		<input type="file" name="file" value="Upload file" />
  >	</form>

  you would do the following:

  >	@on(POST='/api/postThis')
  >	def postThis( self, request ):
  >		file_name = request.get('name')
  >		file_data = request.get('file')
  >		file_info = request.file('file')
  >		return request.respond(
  >			"Received file %s, of %s bytes, with content type:%s" %
  >			(file_info.get("filename"),len(file_data),file_info.get("contentType"))
  >		)

  we see here that the file data is available as any other parameter, but that we
  can use the 'request.file' method to get more information about the file, like
  its content type and original filename.

    Note _____________________________________________________________________________
    It is important to note that *you must return the result* of the
    'request.[respond, returns, redirect, bounce, ...]' methods. These methods
    actually return a generator that will be used by Railways to produce the
    content of the response.


  Sessions
  --------

  Session management is another important aspect of web applications. Railways
  session manage is provided by Alan Saddi's [FLUP][FLUP] session middleware or by
  the [Beaker][BEAKER] library.

  Templates
  ---------


--
  [FLUP]:   FLUP, random WSGI stuff, Alan Saddi, <http://trac.saddi.com/flup>
  [BEAKER]: BEAKER

# EOF - vim: ts=2 sw=2 syn=kiwi et
